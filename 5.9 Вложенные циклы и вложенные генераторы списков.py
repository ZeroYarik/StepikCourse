# matrix = [[0, 1, 2, 3],
#           [10, 11, 12, 13],
#           [20, 21, 22, 23]]
#
# a = [x for row in matrix for x in row]
# print(a)

# a = [f"{i} * {j} = {i*j}"
#      for i in range(3)
#      for j in range(3)]
# print(a)

# M, N= 3, 4
# matrix = [[a for a in range(M)] for b in range(N)]
# print(matrix)

# A = [[1,2,3], [4,5,6], [7,8,9]]
# A = [[x ** 2 for x in row] for row in A]
# print(A)

# A = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
# A = [[row[i] for row in A] for i in range(len(A[0]))]
# print(A)

#  Вводится двумерный список в виде таблицы целых чисел (см. пример ниже).
#  С помощью list comprehension преобразовать двумерный список в одномерный так, чтобы значения элементов шли
#  в обратном порядке. Результат отобразить в виде строки из чисел, записанных через пробел.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# l = [[1,2,3,4],
#      [5,6,7,8],
#      [9,8,7,6],
#      [5,4,3,2]]
#
# a = [x for row in l for x in row]
#
# print(*a[::-1])

# Вводится список целых чисел в строку через пробел. С помощью list comprehension сформировать из них двумерный
# список lst размером N x N (квадратную таблицу чисел). Гарантируется, что из набора введенных чисел можно сформировать
# квадратную матрицу (таблицу). Результат отобразить в виде списка командой:
# print(lst)
# nums = list(map(int, input().split()))
#
# A = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# N = int(pow(len(A), 0.5))
# out = [[A[N * i + j] for j in range(N)] for i in range(N)]
# print(out)

# Используйте следующий список из строк:
#
# t = ["– Скажи-ка, дядя, ведь не даром",
#     "Я Python выучил с каналом",
#     "Балакирев что раздавал?",
#     "Ведь были ж заданья боевые,",
#     "Да, говорят, еще какие!",
#     "Недаром помнит вся Россия",
#     "Как мы рубили их тогда!"
#     ]
# Необходимо преобразовать его в двумерный (вложенный) список lst, где каждая строка представляется списком из слов
# (слова разделяются пробелом), но сохранять слова только длиной более трех символов.
# Решить данную задачу с использованием list comprehension. Результат отобразить с помощью команды:
# print(lst)
# t = ["– Скажи-ка, дядя, ведь не даром",
#     "Я Python выучил с каналом",
#     "Балакирев что раздавал?",
#     "Ведь были ж заданья боевые,",
#     "Да, говорят, еще какие!",
#     "Недаром помнит вся Россия",
#     "Как мы рубили их тогда!"
#     ]
#
# A = [[i for i in row.split() if len(i) > 3] for row in t]
# print(A)

#  Повторите задачу с транспонированием прямоугольной матрицы с помощью list comprehension, изложенной в видео-уроке
#  к этой практике. На вход поступает таблица целых чисел, на выходе нужно отобразить эту же таблицу в транспонированном
#  виде (строки заменяются на столбцы), используя команду:
# for row in A:
#     print(*row)
# где A - транспонированный двумерный список. Желательно сделать эту задачу не пересматривая видео.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# import sys
#
#
# s = sys.stdin.readlines()
# lst_in = [list(map(int, x.strip().split())) for x in s]
# lst_in = [[row[i] for row in lst_in] for i in len(lst_in[0])]
# print(lst_in)

import sys

# считывание списка из входного потока
s = sys.stdin.readlines()
lst_in = [list(map(int, x.strip().split())) for x in s]

# здесь продолжайте программу (используйте список lst_in)
n = len(lst_in)
m = len(lst_in[0])
l = [[lst_in[j][i] for j in range(n)] for i in range(m)]
for row in l:
    print(*row)