"""На вход программе поступают целые числа, записанные через пробел. Прочитайте эту строку с числами и преобразуйте ее
 сначала в список из целых чисел, а затем список в кортеж из целых чисел. То есть, в программе будет две разные
 коллекции: список и кортеж. Отсортируйте по возрастанию значений эти коллекции методом sort,
 если это возможно, а иначе - примените функцию sorted.
На экран ничего выводить не нужно, только сформировать две отсортированные коллекции: lst (список) -
результат сортировки списка; tp_lst (кортеж) - результат сортировки кортежа.
P. S. На результаты сортировок обязательно должны ссылаться переменные с именами lst и tp_lst!"""
# ввод строки в переменную s (переменную в программе не менять)
# s = input()
#
# lst = list(map(int, s.split()))
# tp_lst = (*lst,)
#
# lst.sort()
# tp_lst = tuple(sorted(tp_lst))
#
# print((lst))
# print((tp_lst))

"""Объявите в программе функцию со следующей сигнатурой:
def get_sort(d): ...
На входе этой функции (в параметре d) ожидается словарь формата (пример):
d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево', 'dog': 'собака', 'book': 'книга'}
Функция должна выполнить сортировку ключей словаря d по убыванию (лексикографическая сортировка строк) и
 возвратить список из соответствующих ключей словаря. Сам словарь d при этом должен оставаться неизменным. 
 Например, для указанного словаря d, результатом работы функции должен быть список:
['дерево', 'лошадь', 'собака', 'кот', 'книга']
В программе нужно реализовать только функцию get_sort, вызывать ее не нужно и что-либо выводить на экран.
Подсказка: список в функции get_sort лучше всего формировать с помощью генератора списков."""
# d = {'cat': 'кот', 'horse': 'лошадь', 'tree': 'дерево', 'dog': 'собака', 'book': 'книга'}


# def get_sort(d):
#     return sorted(d.values(), reverse=True)
# print(get_sort(d))



# def get_sort1(d):
#     res = [d[key] for key in sorted(d.keys(), reverse=True)]
#     return res
# print(get_sort1(d))


"""На вход программе поступают целые числа, записанных через пробел. 
Необходимо их прочитать и выбрать из них четыре наибольших уникальных значения. 
Результат вывести на экран в порядке их убывания в одну строчку через пробел.
"""
# nums = set(map(int, input().split()))
# nums = sorted(nums, reverse=True)
# print(*nums[:4])


"""На вход программе поступают две последовательности целых чисел (каждая с новой строки). 
Длины последовательностей могут быть разными. Необходимо их прочитать и сохранить в отдельных списках или кортежах. 
Затем, первый список отсортировать по возрастанию, а второй - по убыванию. Полученные пары из обоих списков сложить
 друг с другом и получить новый список чисел. Результат вывести на экран в виде строки чисел через пробел."""
# l1 = list(map(int, input().split()))
# l2 = list(map(int, input().split()))
# l1.sort()
# l2.sort(reverse=True)
# res = map(lambda x: x[0] + x[1], zip(l1, l2))
# print(*res)

"""На вход программе поступает список товаров в виде строк формата:
название_1:цена_1
название_N:цена_N
В программе уже реализовано считывание всех этих строк и сохранение в списке lst_in:
lst_in = list(map(str.strip, sys.stdin.readlines()))
Необходимо преобразовать этот список в словарь, ключами которого выступают цены (целые числа), а значениями - 
соответствующие названия товаров. Также необходимо написать функцию, которая бы принимала на входе словарь указанного
 формата и возвращала список из наименований трех наиболее дешевых товаров.
Вызовите эту функцию и отобразите на экране полученный список в порядке возрастания цены в одну строчку через пробел."""
# import sys
#
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# d = {int(s.split(':')[1]): s.split(':')[0] for s in lst_in}
#
#
# def get_cheapes(d):
#     res = [d[key] for key in sorted(d.keys())]
#     return res[:3]
#
# print(*get_cheapes(d))