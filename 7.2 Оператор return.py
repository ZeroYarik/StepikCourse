# def send_mail(from_name, old):
#     text = f"qwerty {from_name} {old}"
#     print(text)
#
#
# send_mail("Иван Иванович", 7)


# def get_sqrt(x):
#     res = None if x < 0 else x ** 0.5
#     return res, x # на команде return выполнение функции заканчивается
#     return x # второй команды return быть не может
#
#
# a, b = get_sqrt(49)
# print(a, b)

# def get_max2(a, b):
#     return a if a > b else b
#
#
# def get_max3(a, b, c):
#     return get_max2(a, get_max2(b, c))
#
#
# PERIMETR = True
# if PERIMETR:
#     def get_rect(a, b):
#         return 2 * (a + b)
# else:
#     def get_rect(a, b):
#         return a* b
#
#
# print(get_rect(1, 5))
#
#
# x, y, z = 5, 7, 10
# print(get_max3(x, y, z))

# def even(x):
#     return x % 2 == 0
#
# for i in range(1, 20):
#     if even(i):
#         print(i)


# Объявите функцию, которая принимает один аргумент (вещественное число), и возвращает квадрат этого числа.
# После объявления функции прочитайте (с помощью функции input) вещественное число и вызовите функцию с этим значением.
# Выведите на экран результат работы функции.
# def get_sqr(x):
#     return x ** 2
#
# x = float(input())
# print(get_sqr(x))

# Объявите функцию с именем is_triangle, которая принимает три стороны треугольника (целые числа) и проверяет,
# можно ли из переданных аргументов составить треугольник.
# (Напомню, что у любого треугольника длина третьей стороны всегда должна быть меньше суммы двух других).
# Если  проверка проходит, вернуть булево значение True, иначе - значение False.
# Вызывать функцию не нужно, только задать.
# def is_triangle(x, y, z):
#     return True if z < (x + y) else False
#
#
# print(is_triangle(1, 2 ,3))

# Объявите функцию с именем is_large, которая принимает строку (в качестве аргумента) и возвращает False,
# если длина строки меньше трех символов. Иначе возвращается значение True.
# Вызывать функцию не нужно, только объявить.
# def is_large(x):
#     return False if len(x) < 3 else True

# Объявите функцию для проверки числа на четность (возвращается True, если переданное число четное и False, если число нечетное).
# После объявления функции в цикле необходимо считывать целое числовое значение (функцией input), пока
# не поступит число 1. Если прочитанное значение четное (проверяется с помощью заданной функции),
# то оно выводится на экран (в столбик, то есть, каждое значение с новой строки).
# def is_even(x):
#     return True if x % 2 == 0 else False
#
# num = int(input())
# while num != 1:
#     if is_even(num):
#         print(num)
#         num = int(input())
#     else:
#         num = int(input())

# Объявите функцию для проверки числа на нечетность (возвращается True, если переданное число нечетное и False, если число четное).
# После объявления функции прочитайте (с помощью функции input) список целых значений,
# записанных в одну строку через пробел. И, используя генератор списков и созданную функцию,
# сформируйте список из нечетных значений на основе введенного исходного списка. Результат отобразите на экране командой:
# print(*lst)
# где lst - сформированный список из нечетных значений.
# def not_even(x):
#     return True if x % 2 != 0 else False
#
# nums = list(map(int, input().split()))
#
# new_list = [i for i in nums if not_even(i)]
# print(*new_list)

# Вводится слово в переменную tp. Если это слово RECT, то следует объявить функцию с именем get_sq с двумя параметрами,
# вычисляющую площадь прямоугольника и возвращающую вычисленное значение.
# (На экран она ничего не должна выводить, только возвращать значение).
# Если же введенное слово не RECT (любое другое), то объявляется функция с тем же именем get_sq,
# с одним параметром для вычисления площади квадрата (формула: a*a). Вычисленное значение возвращается функцией.
# (Она также ничего не выводит на экран).
# Примечание: в программе должна быть задана только одна функция с именем get_sq в зависимости от введенного слова.
# Вызывать функцию не нужно, только объявлять.

# tp = input()
#
# if tp == "RECT":
#     def get_sq(x, y):
#         return x * y
# else:
#     def get_sq(x):
#         return x * x

# Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает False,
# если длина строки меньше 6 символов. Иначе возвращается значение True.
# После объявления функции прочитайте (с помощью функции input) список названий городов, записанных в одну строку
# через пробел. Затем, используя генератор списка и созданную функцию, сформируйте список из названий городов длиной
# не менее шести символов на основе введенного исходного списка. Результат отобразите на экране командой:
# print(*lst)
# где lst - итоговый сформированный список.
# def get_lentgh(x):
#     return False if len(x) < 6 else True
#
#
# cities = list(map(str, input().split()))
#
# new_list = [i for i in cities if get_lentgh(i)]
# print(*new_list)

# Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает два значения в виде кортежа:
# переданная строка и ее длина.
# После объявления функции прочитайте (с помощью функции input) список названий городов, записанных в одну строку
# через пробел. Затем, используя генератор словарей и созданную функцию, сформируйте словарь d в формате:
# d = {<город 1>: <число символов>, ..., <город N>: <число символов>}
# Выведите этот словарь в порядке возрастания длин строк с помощью команд:
# a = sorted(d, key=lambda x: d[x])
# print(*a)
# P. S. Пока просто запишите эти команды. Как они работают станет ясно позже,
# когда мы подробнее изучим функции сортировки и работу оператора *.
# def get_smth(x):
#     return x, len(x)
#
#
# cities = list(map(str, input().split()))
# d = {x: x_len for x, x_len in (get_smth(x) for x in cities)}
# a = sorted(d, key=lambda x: d[x])
# print(*a)

# Вводится список целых чисел в одну строчку через пробел.
# Необходимо задать функцию, которая принимает два аргумента
# (максимальное и минимальное значения из списка) и возвращает их произведение.
# Вызовите эту функцию и отобразите на экране полученное числовое значение
# Подсказка: для передачи аргументов функции используйте функции max и min для введенного списка чисел.
# nums = list(map(int, input().split()))
# def get_times(max, min):
#     return max * min
#
# print(get_times(max(nums), min(nums)))