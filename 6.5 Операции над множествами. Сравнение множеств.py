# setA = {1, 2, 3, 4}
# setB = {3, 4, 5, 6, 7}
#
# print(setA & setB) # результат пересечения двух множеств
# print(setA.intersection(setB)) # тоже самое # intersection_update если хотим сохранить результат множества
# print(setA | setB) # объединение двух множеств
# print(setA.union(setB)) # тоже объединение
# print(setA - setB) # вычитание множества. Важен порядок множеств.
# print(setB - setA)
# print(setA ^ setB) # симметричная разность, получаем элементы которые уникальны для обоих множеств.
#
# setA = {7, 6, 5, 4, 3}
# setB = {3, 4, 5, 6, 7, 1}
#
# print(setA < setB)

#  Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
#  Необходимо выбрать и отобразить на экране уникальные числа, присутствующие и в первом и во втором списках
#  одновременно. Результат выведите на экран в виде строки чисел,
#  записанных по возрастанию через пробел, используя команду (здесь s - это множество):
# print(*sorted(s))
# P. S. О функции sorted мы еще будем говорить, а также об операторе *.
# Пока просто запомните такую возможность сортировки и вывода произвольных коллекций на экран.
# numsA = set(map(int, input().split()))
# numsB = set(map(int, input().split()))
# print(*sorted(numsA & numsB))

#  Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
#  Необходимо выбрать и отобразить на экране уникальные числа, присутствующие в первом списке,
#  но отсутствующие во втором. Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел.
# numsA = set(map(int, input().split()))
# numsB = set(map(int, input().split()))
# print(*sorted(numsA - numsB))

# Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
# Необходимо выбрать и отобразить на экране уникальные числа, присутствующие в первом или втором списках,
# но отсутствующие одновременно в обоих. Результат выведите на экран в виде строки чисел,
# записанных по возрастанию через пробел.
# numsA = set(map(int, input().split()))
# numsB = set(map(int, input().split()))
# new_set = numsA - numsB
# new_set2 = numsB - numsA
# print(*sorted(new_set | new_set2))

# Вводятся два списка городов каждый с новой строки (в строке названия через пробел). Необходимо сравнить их между
# собой на равенство по уникальным (не повторяющимся) городам. Если списки содержат одни и те же уникальные города,
# то вывести на экран ДА, иначе - НЕТ.
#Москва Тверь Уфа Казань Уфа Москва
#Уфа Тверь Москва Казань
# citiesA = set(map(str, input().split()))
# citiesB = set(map(str, input().split()))
# print('ДА' if citiesA == citiesB else 'НЕТ')

# Вводится список оценок студента - его ответов у доски по предмету "Информатика" в виде чисел от 2 до 5 в одну строку
# через пробел. Если студент имеет хотя бы одну двойку, то он не допускается до экзамена.
# Определить на основе введенного списка, допущен ли студент. Если допущен, то вывести слово ДОПУЩЕН,
# иначе - НЕ ДОПУЩЕН. При реализации задачи используйте множество для определения наличия двойки.
# grades = set(map(int, input().split()))
# print("НЕ ДОПУЩЕН" if 2 in grades else "ДОПУЩЕН")

# Вводятся два списка городов каждый с новой строки (в строке названия через пробел),
# которые объехал Сергей в 1-й и 2-й годы своего путешествия по России.
# Требуется определить, включал ли его маршрут во 2-й год все города 1-го года путешествия?
# Если это так, то вывести ДА, иначе - НЕТ.
# citiesA = set(map(str, input().split()))
# citiesB = set(map(str, input().split()))
# print("ДА" if (citiesB & citiesA) == citiesA else "НЕТ")

# Вводится натуральное число, которое может содержать только простые множители 1, 2, 3, 5 и 7
# (любые из них, не обязательно все). Необходимо разложить введенное число на простые множители и проверить,
# содержит ли оно множители 2, 3 и 5 (обязательно все их, хотя бы один раз). Если это так, то вывести ДА, иначе - НЕТ.
# num = int(input())
# new_nums = set()
# for i in range(1, num + 1):
#     if num % i == 0:
#         new_nums.add(i)
#
#
# for j in new_nums:
#     if 2 in new_nums and 3 in new_nums and 5 in new_nums:
#         print('ДА')
#         break
#     else:
#         print("НЕТ")
#         break
