# ДЕКОРАТОР ЭТО СТРУКТУРНЫЙ ПАТТЕРН ПРОЕКТИРОВАНИЯ КОТОРЫЙ В ПИТОНЕ РЕАЛИЗУЕТСЯ С ПОМОЩЬЮ ФУНКЦИИ


# def func_decorator(func):
#     def wrapper():
#         print("before")
#         func()
#         print("after")
#
#     return wrapper()
#
#
# def some_func():
#     print("Call function some_func")
#
#
# some_func = func_decorator(some_func)


# Объявите функцию с именем get_sq, которая вычисляет площадь прямоугольника по двум параметрам: width и height -
# ширина и высота прямоугольника. И возвращает результат (сама ничего на экран не выводит).
# То есть, функция имеет сигнатуру:
# def get_sq(width, height): ...
# Определите декоратор func_show для этой функции, который отображает результат на экране в виде строки (без кавычек):
# "Площадь прямоугольника: <значение>"
# Вызывать функцию и декоратор не нужно, только объявить. Применять декоратор к функции также не нужно.
# def func_show(get_sq):
#     def wrapper():
#         return f"Площадь прямоугольника: {get_sq(width, height)}"
#
#     return wrapper
#
#
# @func_show
# def get_sq(width, height):
#     return width * height
#
#
# width, height = map(int, input().split())
#
# x = get_sq()
# print(x)

# На вход программы поступает строка с названиями пунктов меню, записанные в одну строчку через пробел.
# Необходимо задать функцию с именем get_menu, которая преобразует эту строку в список из слов и возвращает этот список.
# Сигнатура функции, следующая:
# def get_menu(s): ...
# Определите декоратор для этой функции с именем show_menu, который отображает список на экран в формате:
# 1. Пункт_1
# 2. Пункт_1
# N. Пункт_N
# Примените декоратор show_menu к функции get_menu, используя оператор @. Более ничего в программе делать не нужно.
# Сами функции не вызывать.
# P.S. В программе необходимо только объявить декоратор и применить его к функции, более ничего делать не нужно.
# def show_menu(func):
#     def wrapper(*args):
#         menu = func(*args)
#         for i,v in enumerate(s):
#             print(f"{i + 1}. {v}")
#
#     return wrapper
#
# @show_menu
# def get_menu(s):
#     return s
#
#
# s = input().split()
#
# print(get_menu(s))

# def show_menu(func):
#     def wrapper(*args):                                       # функция, которая выполняет блок команд
#         menu = func(*args)                                    # запускаем оборачиваемую функцию
#         [print(f"{i+1}. {j}") for i, j in enumerate(menu)]    # выводим результат согласно задания
#     return wrapper                                            # возвращаем результат блока команд (запускаем)
# @show_menu                        # применяем декоратор
# def get_menu(s):                  # объявляем функцию
#     return s.split()
#
# s = input()
#
# print(get_menu(s))

# На вход программы поступает строка из целых чисел, записанных через пробел. Напишите функцию get_list,
# которая преобразовывает эту строку в список из целых чисел и возвращает его. Определите декоратор для этой функции,
# который сортирует список чисел по возрастанию. Результат сортировки должен возвращаться при вызове декоратора.
# Вызовите декорированную функцию get_list и отобразите полученный отсортированный список lst командой:
# print(*lst)
# def sort_nums(func):
#     def wrapper(*args, **kwargs):
#         nums = func(*args, **kwargs)
#         return sorted(nums)
#     return wrapper
#
#
# @sort_nums
# def get_list(nums):
#     return list(map(int, nums.split()))
#
#
# nums = input()
#
# lst = get_list(nums)
# print(*lst)

# Вводятся две строки из слов (слова записаны через пробел). Объявите функцию, которая преобразовывает эти две строки
# в два списка слов и возвращает эти списки.
# Определите декоратор для этой функции, который из двух списков формирует словарь, в котором ключами являются слова из
# первого списка, а значениями - соответствующие элементы из второго списка.
# Полученный словарь должен возвращаться при вызове декоратора.
# Примените декоратор к первой функции и вызовите ее для введенных строк.
# Результат (словарь d) отобразите на экранеd командой:
# print(*sorted(d.items()))
# def dict_maker(func):
#     def wrapper(*args, **kwargs):
#         res = func(*args, **kwargs)
#         return dict(zip(res[0], res[1]))
#     return wrapper
#
# @dict_maker
# def list_maker(s1, s2):
#     l1 = list(s1.split())
#     l2 = list(s2.split())
#     return l1, l2
#
#
# s1 = input()
# s2 = input()
# d = list_maker(s1,s2)
# print(*sorted(d.items()))


# Объявите функцию, которая принимает строку на кириллице и преобразовывает ее в латиницу, используя следующий словарь
# для замены русских букв на соответствующее латинское написание:
# t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
#      'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
#      'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
#      'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
# Функция должна возвращать преобразованную строку. Замены делать без учета регистра (исходную строку перевести в
# нижний регистр - малые буквы). Все небуквенные символы ": ;.,_" превращать в символ '-' (дефиса).
# Определите декоратор для этой функции, который несколько подряд идущих дефисов, превращает в один дефис.
# Полученная строка должна возвращаться при вызове декоратора. (Сам декоратор на экран ничего выводить не должен).
# Примените декоратор к первой функции и вызовите ее для введенной строки s на кириллице:
# s = input()
# Результат работы декорированной функции отобразите на экране.
t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
     'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
     'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
     'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
def remove(func):
    def wrapper(*args, **kwargs):
        ls = func(*args, **kwargs).replace("-", " ").split()
        return "-".join(ls)
    return wrapper


@remove
def swap_letters(strings):
    lst = [t.get(i, i) if i not in [":", ";", '.', ',', ' '] else '-' for i in strings.lower()]
    return ''.join(lst)

s = input()

x = swap_letters(s)
print(x)