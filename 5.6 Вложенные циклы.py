# for i in range(1, 4):
#     for j in range(1, 6):
#         print(f"i {i}, j = {j}", end=' ')
#     print()

# l = [[1,2,3,4], [5,6,7,8], [9,10,11]]
# s = [[1,1,1,1], [2,2,2,2], [3,3,3,3]]
# z = []
#
#
# for i, row in enumerate(l):
#     r  = []
#     for j, x in enumerate(row):
#         r.append(x + s[i][j])
#
#     z.append(r)
#
# print(z)

# t = ["– Скажи-ка,  дядя, ведь не даром",
#     "Я Python выучил с   каналом",
#     "Балакирев что    раздавал?",
#     "Ведь были  ж заданья боевые,",
#     "Да, говорят,  еще какие!",
#     "Недаром помнит    вся Россия",
#     "Как мы рубили   их тогда!"
# ]
#
# for i, v in enumerate(t):
#     while v.count('  '):
#         v = v.replace('  ', ' ')
#
#     t[i] = v
# print(t)

M, N = map(int, input().split())

zeros = []
for i in range(M):
    zeros.append([0] * N)

print(zeros)
#
# for i in range(M):
#     for j in range(N):
#         zeros[i][j] = 1
#
# print(zeros)

# A = [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]
#
# for i in range(len(A)):
#     for j in range(i+1, len(A)):
#         A[i][j], A[j][i] = A[j][i], A[i][j]
#
#
# for r in A:
#     for x in r:
#         print(x, end='\t')
#     print()

# Вводится натуральное число N (то есть, положительное, целое).
# Требуется создать двумерный (вложенный) список размером N x N элементов, состоящий из всех единиц, а затем,
# в последний столбец записать пятерки. Вывести этот список на экран в виде таблицы чисел, как показано в примере ниже.
# P.S. Будьте внимательны в конце строк пробелов быть не должно!
# number = int(input())
# for i in range(number):
#     for j in range(number-1):
#         print(f'1', end=' ')
#     print(5)

# Вводится список из URL-адресов (каждый с новой строки). Требуется в них заменить все пробелы на символ дефиса (-).
# Следует учесть, что может быть несколько подряд идущих пробелов.
# Результат преобразования вывести на экран в виде строк из URL-адресов.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# import sys
#
# lst_in = list(map(str.strip, sys.stdin.readlines()))
#
# for i, v in enumerate(lst_in):
#     while v.count(' '):
#         v = v.replace(' ', '-')
#         while v.count('--'):
#             v = v.replace('--', '-')
#     lst_in[i] = v
# print(*lst_in, sep='\n')

# Вводится натуральное число n. Необходимо найти все простые числа, которые меньше этого числа n, то есть,
# в диапазоне [2; n). Результат вывести на экран в строчку через пробел.
# number = int(input())
# for num in range(2, number):
#
#     for i in range(2, num):
#         if num % i == 0:
#             break
#     else:
#         print(num, end=' ')

# Вводится двумерный список размерностью 5 х 5 элементов, состоящий из нулей и, в некоторых позициях,
# единиц (см. пример ввода ниже). Требуется проверить, не касаются ли единицы друг друга по горизонтали,
# вертикали и диагонали. То есть, вокруг каждой единицы должны быть нули. Если проверка проходит вывести ДА, иначе - НЕТ.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# НЕ РЕШИЛ!!!
# import sys
#
# # считывание списка из входного потока
# s = sys.stdin.readlines()
# lst_in = [list(map(int, x.strip().split())) for x in s]
# for i in range(len(lst_in)-1):
#     for j in range(len(lst_in)-1):
#         if lst_in[i][j] + lst_in[i][j+1] + lst_in[i+1][j] + lst_in[i+1][j+1] > 1:
#             print("НЕТ")
#             break
#     else:
#         print("ДА")
#     break

# Вводится двумерный список размерностью 5 х 5 элементов, состоящий из целых чисел (пример ввода см. ниже).
# Проверьте, является ли этот двумерный список симметричным относительно главной диагонали.
# Главная диагональ — та, которая идёт из левого верхнего угла двумерного массива в правый нижний.
# Выведите на экран ДА, если матрица симметрична и НЕТ - в противном случае.
# P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
# НЕ РЕШИЛ!!!

# x = [5, 2, 3, 1, 4]
# x.sort()
# print(*x)

# В некоторой стране используются денежные купюры достоинством в 1, 2, 4, 8, 16, 32 и 64. Вводится натуральное число n.
# Как наименьшим количеством таких денежных купюр можно выплатить сумму n? Вывести на экран список купюр для
# формирования суммы n (в одну строчку через пробел, начиная с наибольшей и заканчивая наименьшей).
# Предполагается, что имеется достаточно большое количество купюр всех достоинств.
# n = int(input())
#
# lst = [64, 32, 16, 8, 4, 2, 1]
# res = []
#
# for i in range(len(lst)):
#     while n >= lst[i]:
#         n = n - lst[i]
#         res.append(lst[i])
#
# print(*res)

